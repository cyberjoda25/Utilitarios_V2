BROKER SCHEMA diners.utilitarios.genericos


CREATE COMPUTE MODULE LlamarAs400V2_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		
		SET Environment.FlujosAs400.Salida = NULL;
		-- Se verifica si hay valor en el timeOut
		IF Environment.FlujosAs400.Timeout IS NOT NULL THEN
			DECLARE timeOut INTEGER CAST(Environment.FlujosAs400.Timeout AS INTEGER);
			IF timeOut < 30 THEN
				SET timeOut = timeOut * 1000;
				SET OutputLocalEnvironment.Destination.HTTP.TimeoutMillis = timeOut;
			END IF;
		END IF;
		
		IF FIELDTYPE(OutputRoot.XMLNSC.InputAs400) IS NOT NULL THEN
			SET OutputRoot.XMLNSC.InputAs400.Conexion.hostname = Environment.FlujosAs400.ServiceConfigurable;
			SET OutputRoot.XMLNSC.InputAs400.Conexion.programa = Environment.FlujosAs400.Programa;
			SET OutputRoot.XMLNSC.InputAs400.Conexion.libraryList = Environment.FlujosAs400.Library;
			SET OutputRoot.XMLNSC.InputAs400.Conexion.rutaPath = Environment.FlujosAs400.Path;
			
			/*Método para imprimir logs*/
			DECLARE referencia REFERENCE TO Environment;
			CALL diners.logs.ImprimirLogs(OutputRoot.XMLNSC.InputAs400, 'AS400_' || Environment.FlujosAs400.Programa, 'E', referencia);
			
			SET Environment.Variables.ruteoAs = 'HTTP';
		ELSE
			DECLARE soapMessageIn REFERENCE TO OutputRoot.JSON.Data.MessageIn;
			CREATE LASTCHILD OF OutputRoot.JSON.Data AS soapMessageIn NAME 'MessageIn';
			
			DECLARE soapInHeader REFERENCE TO soapMessageIn;
			CREATE LASTCHILD OF soapMessageIn AS soapInHeader NAME 'header';
			SET soapInHeader.hostname = Environment.FlujosAs400.ServiceConfigurable;
			SET soapInHeader.moduloRPG = Environment.FlujosAs400.moduloRPG;
			SET soapInHeader.programa = Environment.FlujosAs400.Programa;
			SET soapInHeader.nomProcedimiento = Environment.FlujosAs400.nomProcedimiento;
			SET soapInHeader.libraryList = Environment.FlujosAs400.Library;
			SET soapInHeader.rutaPath = Environment.FlujosAs400.Path;
			SET soapInHeader.comandoRPG = Environment.FlujosAs400.comandoRPG;
			
			DECLARE soapInBody REFERENCE TO soapMessageIn;
			CREATE LASTCHILD OF soapMessageIn AS soapInBody NAME 'body';
			
			CREATE LASTCHILD OF soapInBody NAME Environment.FlujosAs400.Programa;
			
			SET soapInBody.[<] = Environment.FlujosAs400.Entrada.[<];
			
			/*Método para imprimir logs*/
			DECLARE referencia REFERENCE TO Environment;
			CALL diners.logs.ImprimirLogs(OutputRoot.JSON.Data, 'AS400_' || Environment.FlujosAs400.Programa, 'E', referencia);
			
			SET Environment.Variables.ruteoAs = 'JSON';
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
